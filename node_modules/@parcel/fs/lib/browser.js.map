{"mappings":"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","sources":["packages/core/fs/src/index.js","packages/core/fs/src/NodeFS.browser.js","packages/core/fs/src/MemoryFS.js","packages/core/fs/package.json","node_modules/nullthrows/nullthrows.js","packages/core/fs/src/find.js","packages/core/fs/src/OverlayFS.js"],"sourcesContent":["// @flow strict-local\nimport type {FileSystem} from './types';\nimport type {FilePath} from '@parcel/types';\nimport type {Readable, Writable} from 'stream';\n\nimport path from 'path';\nimport stream from 'stream';\nimport {promisify} from 'util';\n\nexport type * from './types';\nexport * from './NodeFS';\nexport * from './MemoryFS';\nexport * from './OverlayFS';\n\nconst pipeline: (Readable, Writable) => Promise<void> = promisify(\n  stream.pipeline,\n);\n\n// Recursively copies a directory from the sourceFS to the destinationFS\nexport async function ncp(\n  sourceFS: FileSystem,\n  source: FilePath,\n  destinationFS: FileSystem,\n  destination: FilePath,\n) {\n  await destinationFS.mkdirp(destination);\n  let files = await sourceFS.readdir(source);\n  for (let file of files) {\n    let sourcePath = path.join(source, file);\n    let destPath = path.join(destination, file);\n    let stats = await sourceFS.stat(sourcePath);\n    if (stats.isFile()) {\n      await pipeline(\n        sourceFS.createReadStream(sourcePath),\n        destinationFS.createWriteStream(destPath),\n      );\n    } else if (stats.isDirectory()) {\n      await ncp(sourceFS, sourcePath, destinationFS, destPath);\n    }\n  }\n}\n","// @flow\nimport type {FileSystem} from './types';\n\n// $FlowFixMe[prop-missing] handled by the throwing constructor\nexport class NodeFS implements FileSystem {\n  constructor() {\n    throw new Error(\"NodeFS isn't available in the browser\");\n  }\n}\n","// @flow\n\nimport type {FileSystem, FileOptions, ReaddirOptions, Encoding} from './types';\nimport type {FilePath} from '@parcel/types';\nimport type {\n  Event,\n  Options as WatcherOptions,\n  AsyncSubscription,\n} from '@parcel/watcher';\n\nimport path from 'path';\nimport {Readable, Writable} from 'stream';\nimport {registerSerializableClass} from '@parcel/core';\nimport {SharedBuffer} from '@parcel/utils';\nimport packageJSON from '../package.json';\nimport WorkerFarm, {Handle} from '@parcel/workers';\nimport nullthrows from 'nullthrows';\nimport EventEmitter from 'events';\nimport {findAncestorFile, findNodeModule, findFirstFile} from './find';\n\nconst instances: Map<number, MemoryFS> = new Map();\nlet id = 0;\n\ntype HandleFunction = (...args: Array<any>) => any;\ntype SerializedMemoryFS = {\n  id: number,\n  handle: any,\n  dirs: Map<FilePath, Directory>,\n  files: Map<FilePath, File>,\n  symlinks: Map<FilePath, FilePath>,\n  ...\n};\n\ntype WorkerEvent = {|\n  type: 'writeFile' | 'unlink' | 'mkdir' | 'symlink',\n  path: FilePath,\n  entry?: Entry,\n  target?: FilePath,\n|};\n\ntype ResolveFunction = () => mixed;\n\nexport class MemoryFS implements FileSystem {\n  dirs: Map<FilePath, Directory>;\n  files: Map<FilePath, File>;\n  symlinks: Map<FilePath, FilePath>;\n  watchers: Map<FilePath, Set<Watcher>>;\n  events: Array<Event>;\n  id: number;\n  handle: Handle;\n  farm: WorkerFarm;\n  _cwd: FilePath;\n  _eventQueue: Array<Event>;\n  _watcherTimer: TimeoutID;\n  _numWorkerInstances: number = 0;\n  _workerHandles: Array<Handle>;\n  _workerRegisterResolves: Array<ResolveFunction> = [];\n  _emitter: EventEmitter = new EventEmitter();\n\n  constructor(workerFarm: WorkerFarm) {\n    this.farm = workerFarm;\n    this.dirs = new Map([['/', new Directory()]]);\n    this.files = new Map();\n    this.symlinks = new Map();\n    this.watchers = new Map();\n    this.events = [];\n    this.id = id++;\n    this._cwd = '/';\n    this._workerHandles = [];\n    this._eventQueue = [];\n    instances.set(this.id, this);\n    this._emitter.on('allWorkersRegistered', () => {\n      for (let resolve of this._workerRegisterResolves) {\n        resolve();\n      }\n      this._workerRegisterResolves = [];\n    });\n  }\n\n  static deserialize(opts: SerializedMemoryFS): MemoryFS | WorkerFS {\n    let existing = instances.get(opts.id);\n    if (existing != null) {\n      // Correct the count of worker instances since serialization assumes a new instance is created\n      WorkerFarm.getWorkerApi().runHandle(opts.handle, [\n        'decrementWorkerInstance',\n        [],\n      ]);\n      return existing;\n    }\n\n    let fs = new WorkerFS(opts.id, nullthrows(opts.handle));\n    fs.dirs = opts.dirs;\n    fs.files = opts.files;\n    fs.symlinks = opts.symlinks;\n    return fs;\n  }\n\n  serialize(): SerializedMemoryFS {\n    if (!this.handle) {\n      this.handle = this.farm.createReverseHandle(\n        (fn: string, args: Array<mixed>) => {\n          // $FlowFixMe\n          return this[fn](...args);\n        },\n      );\n    }\n\n    // If a worker instance already exists, it will decrement this number\n    this._numWorkerInstances++;\n\n    return {\n      $$raw: false,\n      id: this.id,\n      handle: this.handle,\n      dirs: this.dirs,\n      files: this.files,\n      symlinks: this.symlinks,\n    };\n  }\n\n  decrementWorkerInstance() {\n    this._numWorkerInstances--;\n    if (this._numWorkerInstances === this._workerHandles.length) {\n      this._emitter.emit('allWorkersRegistered');\n    }\n  }\n\n  cwd(): FilePath {\n    return this._cwd;\n  }\n\n  chdir(dir: FilePath) {\n    this._cwd = dir;\n  }\n\n  _normalizePath(filePath: FilePath, realpath: boolean = true): FilePath {\n    filePath = path.resolve(this.cwd(), filePath);\n\n    // get realpath by following symlinks\n    if (realpath) {\n      let {root, dir, base} = path.parse(filePath);\n      let parts = dir.slice(root.length).split(path.sep).concat(base);\n      let res = root;\n      for (let part of parts) {\n        res = path.join(res, part);\n        let symlink = this.symlinks.get(res);\n        if (symlink) {\n          res = symlink;\n        }\n      }\n\n      return res;\n    }\n\n    return filePath;\n  }\n\n  async writeFile(\n    filePath: FilePath,\n    contents: Buffer | string,\n    options?: ?FileOptions,\n  ) {\n    filePath = this._normalizePath(filePath);\n    if (this.dirs.has(filePath)) {\n      throw new FSError('EISDIR', filePath, 'is a directory');\n    }\n\n    let dir = path.dirname(filePath);\n    if (!this.dirs.has(dir)) {\n      throw new FSError('ENOENT', dir, 'does not exist');\n    }\n\n    let buffer = makeShared(contents);\n    let file = this.files.get(filePath);\n    let mode = (options && options.mode) || 0o666;\n    if (file) {\n      file.write(buffer, mode);\n      this.files.set(filePath, file);\n    } else {\n      this.files.set(filePath, new File(buffer, mode));\n    }\n\n    await this._sendWorkerEvent({\n      type: 'writeFile',\n      path: filePath,\n      entry: this.files.get(filePath),\n    });\n\n    this._triggerEvent({\n      type: file ? 'update' : 'create',\n      path: filePath,\n    });\n  }\n\n  // eslint-disable-next-line require-await\n  async readFile(filePath: FilePath, encoding?: Encoding): Promise<any> {\n    return this.readFileSync(filePath, encoding);\n  }\n\n  readFileSync(filePath: FilePath, encoding?: Encoding): any {\n    filePath = this._normalizePath(filePath);\n    let file = this.files.get(filePath);\n    if (file == null) {\n      throw new FSError('ENOENT', filePath, 'does not exist');\n    }\n\n    let buffer = file.read();\n    if (encoding) {\n      return buffer.toString(encoding);\n    }\n\n    return buffer;\n  }\n\n  async copyFile(source: FilePath, destination: FilePath) {\n    let contents = await this.readFile(source);\n    await this.writeFile(destination, contents);\n  }\n\n  statSync(filePath: FilePath): Stat {\n    filePath = this._normalizePath(filePath);\n\n    let dir = this.dirs.get(filePath);\n    if (dir) {\n      return dir.stat();\n    }\n\n    let file = this.files.get(filePath);\n    if (file == null) {\n      throw new FSError('ENOENT', filePath, 'does not exist');\n    }\n\n    return file.stat();\n  }\n\n  // eslint-disable-next-line require-await\n  async stat(filePath: FilePath): Promise<Stat> {\n    return this.statSync(filePath);\n  }\n\n  readdirSync(dir: FilePath, opts?: ReaddirOptions): any {\n    dir = this._normalizePath(dir);\n    if (!this.dirs.has(dir)) {\n      throw new FSError('ENOENT', dir, 'does not exist');\n    }\n\n    dir += path.sep;\n\n    let res = [];\n    for (let [filePath, entry] of this.dirs) {\n      if (\n        filePath.startsWith(dir) &&\n        filePath.indexOf(path.sep, dir.length) === -1\n      ) {\n        let name = filePath.slice(dir.length);\n        if (opts?.withFileTypes) {\n          res.push(new Dirent(name, entry));\n        } else {\n          res.push(name);\n        }\n      }\n    }\n\n    for (let [filePath, entry] of this.files) {\n      if (\n        filePath.startsWith(dir) &&\n        filePath.indexOf(path.sep, dir.length) === -1\n      ) {\n        let name = filePath.slice(dir.length);\n        if (opts?.withFileTypes) {\n          res.push(new Dirent(name, entry));\n        } else {\n          res.push(name);\n        }\n      }\n    }\n\n    for (let [from] of this.symlinks) {\n      if (from.startsWith(dir) && from.indexOf(path.sep, dir.length) === -1) {\n        let name = from.slice(dir.length);\n        if (opts?.withFileTypes) {\n          res.push(new Dirent(name, {mode: S_IFLNK}));\n        } else {\n          res.push(name);\n        }\n      }\n    }\n\n    return res;\n  }\n\n  // eslint-disable-next-line require-await\n  async readdir(dir: FilePath, opts?: ReaddirOptions): Promise<any> {\n    return this.readdirSync(dir, opts);\n  }\n\n  async unlink(filePath: FilePath): Promise<void> {\n    filePath = this._normalizePath(filePath);\n    if (!this.files.has(filePath) && !this.dirs.has(filePath)) {\n      throw new FSError('ENOENT', filePath, 'does not exist');\n    }\n\n    this.files.delete(filePath);\n    this.dirs.delete(filePath);\n    this.watchers.delete(filePath);\n\n    await this._sendWorkerEvent({\n      type: 'unlink',\n      path: filePath,\n    });\n\n    this._triggerEvent({\n      type: 'delete',\n      path: filePath,\n    });\n\n    return Promise.resolve();\n  }\n\n  async mkdirp(dir: FilePath): Promise<void> {\n    dir = this._normalizePath(dir);\n    if (this.dirs.has(dir)) {\n      return Promise.resolve();\n    }\n\n    if (this.files.has(dir)) {\n      throw new FSError('ENOENT', dir, 'is not a directory');\n    }\n\n    let root = path.parse(dir).root;\n    while (dir !== root) {\n      if (this.dirs.has(dir)) {\n        break;\n      }\n\n      this.dirs.set(dir, new Directory());\n      await this._sendWorkerEvent({\n        type: 'mkdir',\n        path: dir,\n      });\n\n      this._triggerEvent({\n        type: 'create',\n        path: dir,\n      });\n\n      dir = path.dirname(dir);\n    }\n\n    return Promise.resolve();\n  }\n\n  async rimraf(filePath: FilePath): Promise<void> {\n    filePath = this._normalizePath(filePath);\n\n    if (this.dirs.has(filePath)) {\n      let dir = filePath + path.sep;\n      for (let filePath of this.files.keys()) {\n        if (filePath.startsWith(dir)) {\n          this.files.delete(filePath);\n          await this._sendWorkerEvent({\n            type: 'unlink',\n            path: filePath,\n          });\n\n          this._triggerEvent({\n            type: 'delete',\n            path: filePath,\n          });\n        }\n      }\n\n      for (let dirPath of this.dirs.keys()) {\n        if (dirPath.startsWith(dir)) {\n          this.dirs.delete(dirPath);\n          this.watchers.delete(dirPath);\n          await this._sendWorkerEvent({\n            type: 'unlink',\n            path: filePath,\n          });\n\n          this._triggerEvent({\n            type: 'delete',\n            path: dirPath,\n          });\n        }\n      }\n\n      for (let filePath of this.symlinks.keys()) {\n        if (filePath.startsWith(dir)) {\n          this.symlinks.delete(filePath);\n          await this._sendWorkerEvent({\n            type: 'unlink',\n            path: filePath,\n          });\n        }\n      }\n\n      this.dirs.delete(filePath);\n      await this._sendWorkerEvent({\n        type: 'unlink',\n        path: filePath,\n      });\n\n      this._triggerEvent({\n        type: 'delete',\n        path: filePath,\n      });\n    } else if (this.files.has(filePath)) {\n      this.files.delete(filePath);\n      await this._sendWorkerEvent({\n        type: 'unlink',\n        path: filePath,\n      });\n\n      this._triggerEvent({\n        type: 'delete',\n        path: filePath,\n      });\n    }\n\n    return Promise.resolve();\n  }\n\n  async ncp(source: FilePath, destination: FilePath) {\n    source = this._normalizePath(source);\n\n    if (this.dirs.has(source)) {\n      if (!this.dirs.has(destination)) {\n        this.dirs.set(destination, new Directory());\n        await this._sendWorkerEvent({\n          type: 'mkdir',\n          path: destination,\n        });\n\n        this._triggerEvent({\n          type: 'create',\n          path: destination,\n        });\n      }\n\n      let dir = source + path.sep;\n      for (let dirPath of this.dirs.keys()) {\n        if (dirPath.startsWith(dir)) {\n          let destName = path.join(destination, dirPath.slice(dir.length));\n          if (!this.dirs.has(destName)) {\n            this.dirs.set(destName, new Directory());\n            await this._sendWorkerEvent({\n              type: 'mkdir',\n              path: destination,\n            });\n            this._triggerEvent({\n              type: 'create',\n              path: destName,\n            });\n          }\n        }\n      }\n\n      for (let [filePath, file] of this.files) {\n        if (filePath.startsWith(dir)) {\n          let destName = path.join(destination, filePath.slice(dir.length));\n          let exists = this.files.has(destName);\n          this.files.set(destName, file);\n          await this._sendWorkerEvent({\n            type: 'writeFile',\n            path: destName,\n            entry: file,\n          });\n\n          this._triggerEvent({\n            type: exists ? 'update' : 'create',\n            path: destName,\n          });\n        }\n      }\n    } else {\n      await this.copyFile(source, destination);\n    }\n  }\n\n  createReadStream(filePath: FilePath): ReadStream {\n    return new ReadStream(this, filePath);\n  }\n\n  createWriteStream(filePath: FilePath, options: ?FileOptions): WriteStream {\n    return new WriteStream(this, filePath, options);\n  }\n\n  realpathSync(filePath: FilePath): FilePath {\n    return this._normalizePath(filePath);\n  }\n\n  // eslint-disable-next-line require-await\n  async realpath(filePath: FilePath): Promise<FilePath> {\n    return this.realpathSync(filePath);\n  }\n\n  async symlink(target: FilePath, path: FilePath) {\n    target = this._normalizePath(target);\n    path = this._normalizePath(path);\n    this.symlinks.set(path, target);\n    await this._sendWorkerEvent({\n      type: 'symlink',\n      path,\n      target,\n    });\n  }\n\n  existsSync(filePath: FilePath): boolean {\n    filePath = this._normalizePath(filePath);\n    return this.files.has(filePath) || this.dirs.has(filePath);\n  }\n\n  // eslint-disable-next-line require-await\n  async exists(filePath: FilePath): Promise<boolean> {\n    return this.existsSync(filePath);\n  }\n\n  _triggerEvent(event: Event) {\n    this.events.push(event);\n    if (this.watchers.size === 0) {\n      return;\n    }\n\n    // Batch events\n    this._eventQueue.push(event);\n    clearTimeout(this._watcherTimer);\n\n    this._watcherTimer = setTimeout(() => {\n      let events = this._eventQueue;\n      this._eventQueue = [];\n\n      for (let [dir, watchers] of this.watchers) {\n        if (!dir.endsWith(path.sep)) {\n          dir += path.sep;\n        }\n\n        if (event.path.startsWith(dir)) {\n          for (let watcher of watchers) {\n            watcher.trigger(events);\n          }\n        }\n      }\n    }, 50);\n  }\n\n  _registerWorker(handle: Handle) {\n    this._workerHandles.push(handle);\n    if (this._numWorkerInstances === this._workerHandles.length) {\n      this._emitter.emit('allWorkersRegistered');\n    }\n  }\n\n  async _sendWorkerEvent(event: WorkerEvent) {\n    // Wait for worker instances to register their handles\n    while (this._workerHandles.length < this._numWorkerInstances) {\n      await new Promise(resolve => this._workerRegisterResolves.push(resolve));\n    }\n\n    await Promise.all(\n      this._workerHandles.map(workerHandle =>\n        this.farm.workerApi.runHandle(workerHandle, [event]),\n      ),\n    );\n  }\n\n  watch(\n    dir: FilePath,\n    fn: (err: ?Error, events: Array<Event>) => mixed,\n    opts: WatcherOptions,\n  ): Promise<AsyncSubscription> {\n    dir = this._normalizePath(dir);\n    let watcher = new Watcher(fn, opts);\n    let watchers = this.watchers.get(dir);\n    if (!watchers) {\n      watchers = new Set();\n      this.watchers.set(dir, watchers);\n    }\n\n    watchers.add(watcher);\n\n    return Promise.resolve({\n      unsubscribe: () => {\n        watchers = nullthrows(watchers);\n        watchers.delete(watcher);\n\n        if (watchers.size === 0) {\n          this.watchers.delete(dir);\n        }\n\n        return Promise.resolve();\n      },\n    });\n  }\n\n  async getEventsSince(\n    dir: FilePath,\n    snapshot: FilePath,\n    opts: WatcherOptions,\n  ): Promise<Array<Event>> {\n    let contents = await this.readFile(snapshot, 'utf8');\n    let len = Number(contents);\n    let events = this.events.slice(len);\n    let ignore = opts.ignore;\n    if (ignore) {\n      events = events.filter(\n        event => !ignore.some(i => event.path.startsWith(i + path.sep)),\n      );\n    }\n\n    return events;\n  }\n\n  async writeSnapshot(dir: FilePath, snapshot: FilePath): Promise<void> {\n    await this.writeFile(snapshot, '' + this.events.length);\n  }\n\n  findAncestorFile(\n    fileNames: Array<string>,\n    fromDir: FilePath,\n    root: FilePath,\n  ): ?FilePath {\n    return findAncestorFile(this, fileNames, fromDir, root);\n  }\n\n  findNodeModule(moduleName: string, fromDir: FilePath): ?FilePath {\n    return findNodeModule(this, moduleName, fromDir);\n  }\n\n  findFirstFile(filePaths: Array<FilePath>): ?FilePath {\n    return findFirstFile(this, filePaths);\n  }\n}\n\nclass Watcher {\n  fn: (err: ?Error, events: Array<Event>) => mixed;\n  options: WatcherOptions;\n\n  constructor(\n    fn: (err: ?Error, events: Array<Event>) => mixed,\n    options: WatcherOptions,\n  ) {\n    this.fn = fn;\n    this.options = options;\n  }\n\n  trigger(events: Array<Event>) {\n    let ignore = this.options.ignore;\n    if (ignore) {\n      events = events.filter(\n        event => !ignore.some(i => event.path.startsWith(i + path.sep)),\n      );\n    }\n\n    if (events.length > 0) {\n      this.fn(null, events);\n    }\n  }\n}\n\nclass FSError extends Error {\n  code: string;\n  path: FilePath;\n  constructor(code: string, path: FilePath, message: string) {\n    super(`${code}: ${path} ${message}`);\n    this.name = 'FSError';\n    this.code = code;\n    this.path = path;\n    Error.captureStackTrace?.(this, this.constructor);\n  }\n}\n\nclass ReadStream extends Readable {\n  fs: FileSystem;\n  filePath: FilePath;\n  reading: boolean;\n  bytesRead: number;\n  constructor(fs: FileSystem, filePath: FilePath) {\n    super();\n    this.fs = fs;\n    this.filePath = filePath;\n    this.reading = false;\n    this.bytesRead = 0;\n  }\n\n  _read() {\n    if (this.reading) {\n      return;\n    }\n\n    this.reading = true;\n    this.fs.readFile(this.filePath).then(\n      res => {\n        this.bytesRead += res.byteLength;\n        this.push(res);\n        this.push(null);\n      },\n      err => {\n        this.emit('error', err);\n      },\n    );\n  }\n}\n\nclass WriteStream extends Writable {\n  fs: FileSystem;\n  filePath: FilePath;\n  options: ?FileOptions;\n  buffer: Buffer;\n\n  constructor(fs: FileSystem, filePath: FilePath, options: ?FileOptions) {\n    super({emitClose: true, autoDestroy: true});\n    this.fs = fs;\n    this.filePath = filePath;\n    this.options = options;\n    this.buffer = Buffer.alloc(0);\n  }\n\n  _write(\n    chunk: Buffer | string,\n    encoding: any,\n    callback: (error?: Error) => void,\n  ) {\n    let c = typeof chunk === 'string' ? Buffer.from(chunk, encoding) : chunk;\n    this.buffer = Buffer.concat([this.buffer, c]);\n    callback();\n  }\n\n  _final(callback: (error?: Error) => void) {\n    this.fs\n      .writeFile(this.filePath, this.buffer, this.options)\n      .then(callback)\n      .catch(callback);\n  }\n}\n\nconst S_IFREG = 0o100000;\nconst S_IFDIR = 0o040000;\nconst S_IFLNK = 0o120000;\n\nclass Entry {\n  mode: number;\n  atime: number;\n  mtime: number;\n  ctime: number;\n  birthtime: number;\n  constructor(mode: number) {\n    this.mode = mode;\n    let now = Date.now();\n    this.atime = now;\n    this.mtime = now;\n    this.ctime = now;\n    this.birthtime = now;\n  }\n\n  access() {\n    let now = Date.now();\n    this.atime = now;\n    this.ctime = now;\n  }\n\n  modify(mode: number) {\n    let now = Date.now();\n    this.mtime = now;\n    this.ctime = now;\n    this.mode = mode;\n  }\n\n  getSize(): number {\n    return 0;\n  }\n\n  stat(): Stat {\n    return new Stat(this);\n  }\n}\n\nclass Stat {\n  dev: number = 0;\n  ino: number = 0;\n  mode: number;\n  nlink: number = 0;\n  uid: number = 0;\n  gid: number = 0;\n  rdev: number = 0;\n  size: number;\n  blksize: number = 0;\n  blocks: number = 0;\n  atimeMs: number;\n  mtimeMs: number;\n  ctimeMs: number;\n  birthtimeMs: number;\n  atime: Date;\n  mtime: Date;\n  ctime: Date;\n  birthtime: Date;\n\n  constructor(entry: Entry) {\n    this.mode = entry.mode;\n    this.size = entry.getSize();\n    this.atimeMs = entry.atime;\n    this.mtimeMs = entry.mtime;\n    this.ctimeMs = entry.ctime;\n    this.birthtimeMs = entry.birthtime;\n    this.atime = new Date(entry.atime);\n    this.mtime = new Date(entry.mtime);\n    this.ctime = new Date(entry.ctime);\n    this.birthtime = new Date(entry.birthtime);\n  }\n\n  isFile(): boolean {\n    return Boolean(this.mode & S_IFREG);\n  }\n\n  isDirectory(): boolean {\n    return Boolean(this.mode & S_IFDIR);\n  }\n\n  isBlockDevice(): boolean {\n    return false;\n  }\n\n  isCharacterDevice(): boolean {\n    return false;\n  }\n\n  isSymbolicLink(): boolean {\n    return false;\n  }\n\n  isFIFO(): boolean {\n    return false;\n  }\n\n  isSocket(): boolean {\n    return false;\n  }\n}\n\nclass Dirent {\n  name: string;\n  #mode: number;\n\n  constructor(name: string, entry: interface {mode: number}) {\n    this.name = name;\n    this.#mode = entry.mode;\n  }\n\n  isFile(): boolean {\n    return Boolean(this.#mode & S_IFREG);\n  }\n\n  isDirectory(): boolean {\n    return Boolean(this.#mode & S_IFDIR);\n  }\n\n  isBlockDevice(): boolean {\n    return false;\n  }\n\n  isCharacterDevice(): boolean {\n    return false;\n  }\n\n  isSymbolicLink(): boolean {\n    return Boolean(this.#mode & S_IFLNK);\n  }\n\n  isFIFO(): boolean {\n    return false;\n  }\n\n  isSocket(): boolean {\n    return false;\n  }\n}\n\nclass File extends Entry {\n  buffer: Buffer;\n  constructor(buffer: Buffer, mode: number) {\n    super(S_IFREG | mode);\n    this.buffer = buffer;\n  }\n\n  read(): Buffer {\n    super.access();\n    return Buffer.from(this.buffer);\n  }\n\n  write(buffer: Buffer, mode: number) {\n    super.modify(S_IFREG | mode);\n    this.buffer = buffer;\n  }\n\n  getSize(): number {\n    return this.buffer.byteLength;\n  }\n}\n\nclass Directory extends Entry {\n  constructor() {\n    super(S_IFDIR);\n  }\n}\n\nfunction makeShared(contents: Buffer | string): Buffer {\n  if (typeof contents !== 'string' && contents.buffer instanceof SharedBuffer) {\n    return contents;\n  }\n\n  let length = Buffer.byteLength(contents);\n  let shared = new SharedBuffer(length);\n  let buffer = Buffer.from(shared);\n  if (typeof contents === 'string') {\n    buffer.write(contents);\n  } else {\n    buffer.set(contents);\n  }\n\n  return buffer;\n}\n\nclass WorkerFS extends MemoryFS {\n  id: number;\n  handleFn: HandleFunction;\n\n  constructor(id: number, handle: Handle) {\n    // TODO Make this not a subclass\n    // $FlowFixMe\n    super();\n    this.id = id;\n    this.handleFn = (methodName, args) =>\n      WorkerFarm.getWorkerApi().runHandle(handle, [methodName, args]);\n\n    this.handleFn('_registerWorker', [\n      WorkerFarm.getWorkerApi().createReverseHandle(event => {\n        switch (event.type) {\n          case 'writeFile':\n            this.files.set(event.path, event.entry);\n            break;\n          case 'unlink':\n            this.files.delete(event.path);\n            this.dirs.delete(event.path);\n            this.symlinks.delete(event.path);\n            break;\n          case 'mkdir':\n            this.dirs.set(event.path, new Directory());\n            break;\n          case 'symlink':\n            this.symlinks.set(event.path, event.target);\n            break;\n        }\n      }),\n    ]);\n  }\n\n  static deserialize(opts: SerializedMemoryFS): MemoryFS {\n    return nullthrows(instances.get(opts.id));\n  }\n\n  serialize(): SerializedMemoryFS {\n    // $FlowFixMe\n    return {\n      id: this.id,\n    };\n  }\n\n  writeFile(\n    filePath: FilePath,\n    contents: Buffer | string,\n    options: ?FileOptions,\n  ): Promise<void> {\n    super.writeFile(filePath, contents, options);\n    let buffer = makeShared(contents);\n    return this.handleFn('writeFile', [filePath, buffer, options]);\n  }\n\n  unlink(filePath: FilePath): Promise<void> {\n    super.unlink(filePath);\n    return this.handleFn('unlink', [filePath]);\n  }\n\n  mkdirp(dir: FilePath): Promise<void> {\n    super.mkdirp(dir);\n    return this.handleFn('mkdirp', [dir]);\n  }\n\n  rimraf(filePath: FilePath): Promise<void> {\n    super.rimraf(filePath);\n    return this.handleFn('rimraf', [filePath]);\n  }\n\n  ncp(source: FilePath, destination: FilePath): Promise<void> {\n    super.ncp(source, destination);\n    return this.handleFn('ncp', [source, destination]);\n  }\n\n  symlink(target: FilePath, path: FilePath): Promise<void> {\n    super.symlink(target, path);\n    return this.handleFn('symlink', [target, path]);\n  }\n}\n\nregisterSerializableClass(`${packageJSON.version}:MemoryFS`, MemoryFS);\nregisterSerializableClass(`${packageJSON.version}:WorkerFS`, WorkerFS);\nregisterSerializableClass(`${packageJSON.version}:Stat`, Stat);\nregisterSerializableClass(`${packageJSON.version}:File`, File);\nregisterSerializableClass(`${packageJSON.version}:Directory`, Directory);\n","{\n  \"name\": \"@parcel/fs\",\n  \"version\": \"2.6.2\",\n  \"description\": \"Blazing fast, zero configuration web application bundler\",\n  \"license\": \"MIT\",\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/parcel\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/parcel-bundler/parcel.git\"\n  },\n  \"main\": \"lib/index.js\",\n  \"source\": \"src/index.js\",\n  \"types\": \"index.d.ts\",\n  \"engines\": {\n    \"node\": \">= 12.0.0\"\n  },\n  \"targets\": {\n    \"types\": false,\n    \"main\": {\n      \"includeNodeModules\": {\n        \"@parcel/core\": false,\n        \"@parcel/fs-search\": false,\n        \"@parcel/types\": false,\n        \"@parcel/utils\": false,\n        \"@parcel/watcher\": false,\n        \"@parcel/workers\": false\n      }\n    },\n    \"browser\": {\n      \"includeNodeModules\": {\n        \"@parcel/core\": false,\n        \"@parcel/fs-search\": false,\n        \"@parcel/types\": false,\n        \"@parcel/utils\": false,\n        \"@parcel/watcher\": false,\n        \"@parcel/workers\": false\n      }\n    }\n  },\n  \"scripts\": {\n    \"build-ts\": \"mkdir -p lib && flow-to-ts src/types.js > lib/types.d.ts\",\n    \"check-ts\": \"tsc --noEmit index.d.ts\"\n  },\n  \"dependencies\": {\n    \"@parcel/fs-search\": \"2.6.2\",\n    \"@parcel/types\": \"2.6.2\",\n    \"@parcel/utils\": \"2.6.2\",\n    \"@parcel/watcher\": \"^2.0.0\",\n    \"@parcel/workers\": \"2.6.2\"\n  },\n  \"devDependencies\": {\n    \"graceful-fs\": \"^4.2.4\",\n    \"ncp\": \"^2.0.0\",\n    \"nullthrows\": \"^1.1.1\",\n    \"utility-types\": \"^3.10.0\"\n  },\n  \"peerDependencies\": {\n    \"@parcel/core\": \"^2.6.2\"\n  },\n  \"browser\": {\n    \"@parcel/fs\": \"./lib/browser.js\",\n    \"./src/NodeFS.js\": \"./src/NodeFS.browser.js\"\n  },\n  \"gitHead\": \"e10fcfc1e8b71222da90978fb87f1b68e207473e\"\n}\n","'use strict';\n\nfunction nullthrows(x, message) {\n  if (x != null) {\n    return x;\n  }\n  var error = new Error(message !== undefined ? message : 'Got unexpected ' + x);\n  error.framesToPop = 1; // Skip nullthrows's own stack frame.\n  throw error;\n}\n\nmodule.exports = nullthrows;\nmodule.exports.default = nullthrows;\n\nObject.defineProperty(module.exports, '__esModule', {value: true});\n","// @flow\nimport type {FilePath} from '@parcel/types';\nimport type {FileSystem} from './types';\nimport path from 'path';\n\nexport function findNodeModule(\n  fs: FileSystem,\n  moduleName: string,\n  dir: FilePath,\n): ?FilePath {\n  let {root} = path.parse(dir);\n  while (dir !== root) {\n    // Skip node_modules directories\n    if (path.basename(dir) === 'node_modules') {\n      dir = path.dirname(dir);\n    }\n\n    try {\n      let moduleDir = path.join(dir, 'node_modules', moduleName);\n      let stats = fs.statSync(moduleDir);\n      if (stats.isDirectory()) {\n        return moduleDir;\n      }\n    } catch (err) {\n      // ignore\n    }\n\n    // Move up a directory\n    dir = path.dirname(dir);\n  }\n\n  return null;\n}\n\nexport function findAncestorFile(\n  fs: FileSystem,\n  fileNames: Array<string>,\n  dir: FilePath,\n  root: FilePath,\n): ?FilePath {\n  let {root: pathRoot} = path.parse(dir);\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (path.basename(dir) === 'node_modules') {\n      return null;\n    }\n\n    for (const fileName of fileNames) {\n      let filePath = path.join(dir, fileName);\n      try {\n        if (fs.statSync(filePath).isFile()) {\n          return filePath;\n        }\n      } catch (err) {\n        // ignore\n      }\n    }\n\n    if (dir === root || dir === pathRoot) {\n      break;\n    }\n\n    dir = path.dirname(dir);\n  }\n\n  return null;\n}\n\nexport function findFirstFile(\n  fs: FileSystem,\n  filePaths: Array<FilePath>,\n): ?FilePath {\n  for (let filePath of filePaths) {\n    try {\n      if (fs.statSync(filePath).isFile()) {\n        return filePath;\n      }\n    } catch (err) {\n      // ignore\n    }\n  }\n}\n","// @flow\n\nimport type {Stats} from 'fs';\nimport type {FileSystem, ReaddirOptions} from './types';\nimport type {FilePath} from '@parcel/types';\nimport type {\n  Event,\n  Options as WatcherOptions,\n  AsyncSubscription,\n} from '@parcel/watcher';\n\nimport {registerSerializableClass} from '@parcel/core';\nimport packageJSON from '../package.json';\nimport {findAncestorFile, findNodeModule, findFirstFile} from './find';\n\nfunction read(method) {\n  return async function (...args: Array<any>) {\n    try {\n      return await this.writable[method](...args);\n    } catch (err) {\n      return this.readable[method](...args);\n    }\n  };\n}\n\nfunction readSync(method) {\n  return function (...args: Array<any>) {\n    try {\n      return this.writable[method](...args);\n    } catch (err) {\n      return this.readable[method](...args);\n    }\n  };\n}\n\nfunction write(method) {\n  return function (...args: Array<any>) {\n    return this.writable[method](...args);\n  };\n}\n\nfunction checkExists(method) {\n  return function (filePath: FilePath, ...args: Array<any>) {\n    if (this.writable.existsSync(filePath)) {\n      return this.writable[method](filePath, ...args);\n    }\n\n    return this.readable[method](filePath, ...args);\n  };\n}\n\nexport class OverlayFS implements FileSystem {\n  writable: FileSystem;\n  readable: FileSystem;\n  constructor(writable: FileSystem, readable: FileSystem) {\n    this.writable = writable;\n    this.readable = readable;\n  }\n\n  static deserialize(opts: any): OverlayFS {\n    return new OverlayFS(opts.writable, opts.readable);\n  }\n\n  serialize(): {|$$raw: boolean, readable: FileSystem, writable: FileSystem|} {\n    return {\n      $$raw: false,\n      writable: this.writable,\n      readable: this.readable,\n    };\n  }\n\n  readFile: (...args: Array<any>) => Promise<Buffer & string & $Shape<Stats>> =\n    read('readFile');\n  writeFile: (...args: Array<any>) => any = write('writeFile');\n  async copyFile(source: FilePath, destination: FilePath) {\n    if (await this.writable.exists(source)) {\n      await this.writable.writeFile(\n        destination,\n        await this.writable.readFile(source),\n      );\n    } else {\n      await this.writable.writeFile(\n        destination,\n        await this.readable.readFile(source),\n      );\n    }\n  }\n  stat: (...args: Array<any>) => Promise<Buffer & string & $Shape<Stats>> =\n    read('stat');\n  unlink: (...args: Array<any>) => any = write('unlink');\n  mkdirp: (...args: Array<any>) => any = write('mkdirp');\n  rimraf: (...args: Array<any>) => any = write('rimraf');\n  ncp: (...args: Array<any>) => any = write('ncp');\n  createReadStream: (filePath: FilePath, ...args: Array<any>) => any =\n    checkExists('createReadStream');\n  createWriteStream: (...args: Array<any>) => any = write('createWriteStream');\n  cwd: (...args: Array<any>) => any = readSync('cwd');\n  chdir: (...args: Array<any>) => any = readSync('chdir');\n  realpath: (filePath: FilePath, ...args: Array<any>) => any =\n    checkExists('realpath');\n\n  readFileSync: (...args: Array<any>) => any = readSync('readFileSync');\n  statSync: (...args: Array<any>) => any = readSync('statSync');\n  existsSync: (...args: Array<any>) => any = readSync('existsSync');\n  realpathSync: (filePath: FilePath, ...args: Array<any>) => any =\n    checkExists('realpathSync');\n\n  async exists(filePath: FilePath): Promise<boolean> {\n    return (\n      (await this.writable.exists(filePath)) || this.readable.exists(filePath)\n    );\n  }\n\n  async readdir(path: FilePath, opts?: ReaddirOptions): Promise<any> {\n    // Read from both filesystems and merge the results\n    let writable = [];\n    let readable = [];\n    try {\n      writable = await this.writable.readdir(path, opts);\n    } catch (err) {\n      // do nothing\n    }\n\n    try {\n      readable = await this.readable.readdir(path, opts);\n    } catch (err) {\n      // do nothing\n    }\n\n    return Array.from(new Set([...writable, ...readable]));\n  }\n\n  readdirSync(path: FilePath, opts?: ReaddirOptions): any {\n    // Read from both filesystems and merge the results\n    let writable = [];\n    let readable = [];\n    try {\n      writable = this.writable.readdirSync(path, opts);\n    } catch (err) {\n      // do nothing\n    }\n\n    try {\n      readable = this.readable.readdirSync(path, opts);\n    } catch (err) {\n      // do nothing\n    }\n\n    return Array.from(new Set([...writable, ...readable]));\n  }\n\n  async watch(\n    dir: FilePath,\n    fn: (err: ?Error, events: Array<Event>) => mixed,\n    opts: WatcherOptions,\n  ): Promise<AsyncSubscription> {\n    let writableSubscription = await this.writable.watch(dir, fn, opts);\n    let readableSubscription = await this.readable.watch(dir, fn, opts);\n    return {\n      unsubscribe: async () => {\n        await writableSubscription.unsubscribe();\n        await readableSubscription.unsubscribe();\n      },\n    };\n  }\n\n  async getEventsSince(\n    dir: FilePath,\n    snapshot: FilePath,\n    opts: WatcherOptions,\n  ): Promise<Array<Event>> {\n    let writableEvents = await this.writable.getEventsSince(\n      dir,\n      snapshot,\n      opts,\n    );\n    let readableEvents = await this.readable.getEventsSince(\n      dir,\n      snapshot,\n      opts,\n    );\n    return [...writableEvents, ...readableEvents];\n  }\n\n  async writeSnapshot(\n    dir: FilePath,\n    snapshot: FilePath,\n    opts: WatcherOptions,\n  ): Promise<void> {\n    await this.writable.writeSnapshot(dir, snapshot, opts);\n  }\n\n  findAncestorFile(\n    fileNames: Array<string>,\n    fromDir: FilePath,\n    root: FilePath,\n  ): ?FilePath {\n    return findAncestorFile(this, fileNames, fromDir, root);\n  }\n\n  findNodeModule(moduleName: string, fromDir: FilePath): ?FilePath {\n    return findNodeModule(this, moduleName, fromDir);\n  }\n\n  findFirstFile(filePaths: Array<FilePath>): ?FilePath {\n    return findFirstFile(this, filePaths);\n  }\n}\n\nregisterSerializableClass(`${packageJSON.version}:OverlayFS`, OverlayFS);\n"],"names":["path","stream","promisify","pipeline","ncp","sourceFS","source","destinationFS","destination","mkdirp","files","readdir","file","sourcePath","join","destPath","stats","stat","isFile","createReadStream","createWriteStream","isDirectory","NodeFS","constructor","Error","Readable","Writable","registerSerializableClass","SharedBuffer","packageJSON","WorkerFarm","Handle","nullthrows","EventEmitter","findAncestorFile","findNodeModule","findFirstFile","instances","Map","id","MemoryFS","_numWorkerInstances","_workerRegisterResolves","_emitter","workerFarm","farm","dirs","Directory","symlinks","watchers","events","_cwd","_workerHandles","_eventQueue","set","on","resolve","deserialize","opts","existing","get","getWorkerApi","runHandle","handle","fs","WorkerFS","serialize","createReverseHandle","fn","args","$$raw","decrementWorkerInstance","length","emit","cwd","chdir","dir","_normalizePath","filePath","realpath","root","base","parse","parts","slice","split","sep","concat","res","part","symlink","writeFile","contents","options","has","FSError","dirname","buffer","makeShared","mode","write","File","_sendWorkerEvent","type","entry","_triggerEvent","readFile","encoding","readFileSync","read","toString","copyFile","statSync","readdirSync","startsWith","indexOf","name","withFileTypes","push","Dirent","from","S_IFLNK","unlink","delete","Promise","rimraf","keys","dirPath","destName","exists","ReadStream","WriteStream","realpathSync","target","existsSync","event","size","clearTimeout","_watcherTimer","setTimeout","endsWith","watcher","trigger","_registerWorker","all","map","workerHandle","workerApi","watch","Watcher","Set","add","unsubscribe","getEventsSince","snapshot","len","Number","ignore","filter","some","i","writeSnapshot","fileNames","fromDir","moduleName","filePaths","code","message","captureStackTrace","reading","bytesRead","_read","then","byteLength","err","emitClose","autoDestroy","Buffer","alloc","_write","chunk","callback","c","_final","catch","S_IFREG","S_IFDIR","Entry","now","Date","atime","mtime","ctime","birthtime","access","modify","getSize","Stat","dev","ino","nlink","uid","gid","rdev","blksize","blocks","atimeMs","mtimeMs","ctimeMs","birthtimeMs","Boolean","isBlockDevice","isCharacterDevice","isSymbolicLink","isFIFO","isSocket","shared","handleFn","methodName","version","module","exports","JSON","basename","moduleDir","pathRoot","fileName","method","writable","readable","readSync","checkExists","OverlayFS","Array","writableSubscription","readableSubscription","writableEvents","readableEvents"],"version":3,"file":"browser.js.map"}